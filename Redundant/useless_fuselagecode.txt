def calculate_fuselage_centroid(self):


    #Unit is meters
    self.z_bar_fuselage = (2*(self.fuselage_ratio*((self.a_dim + 0.4)*self.fuselage_width)) + 2*(self.s_dim * (self.o_dim * self.fuselage_width)) + ((self.a_dim + self.fuselage_ratio) * self.fuselage_width)) / (2*self.s_dim + 2*self.fuselage_ratio + 1)
    
    self.x_bar_fuselage = (self.s_dim * 0.25 * self.fuselage_width + (self.s_dim * 0.75 * self.fuselage_width) + (0.5*self.fuselage_width) + (self.fuselage_ratio*self.fuselage_width)) / (2*self.s_dim + 2*self.fuselage_ratio + 1)

    return self.x_bar_fuselage, self.z_bar_fuselage
    

def calculate_fuselage_moi(self):
    # Thin walled assumption used for fuselage
    # All moments of inertia are calculated about the centroid of the fuselage
    # All moments of inertia still have to be multiplied by the thickness of the skin
    # Unit is m^4 --> means that t_skin must also be in METERS!

    self.I_xy_fuselage = 0 # * t_fuselage

    self.I_yy_fuselage = self.fuselage_width*(((self.fuselage_ratio + self.a_dim)*self.fuselage_width - self.z_bar_fuselage)**2) + 2*(((self.fuselage_ratio*self.fuselage_width)**3)/12 + self.fuselage_ratio*self.fuselage_width*((self.a_dim + self.fuselage_ratio/2)*self.fuselage_width - self.z_bar_fuselage)**2) + 2*(((self.s_dim**3 * (np.sin(np.radians(25)))**2)/12) + self.s_dim*(self.o_dim -self.z_bar_fuselage)**2) # * t_fuselage

    self.I_zz_fuselage = (self.fuselage_width**3) / 12 + 2*(self.fuselage_ratio*self.fuselage_width*(self.fuselage_width/2)**2) + 2*(self.s_dim*(0.25*self.fuselage_width)**2) # * self.t_fuselage

    return self.I_yy_fuselage, self.I_zz_fuselage, self.I_xy_fuselage
    

# def calculate_stresses(self):

#     self.sigma_1 = (((M_x * self.I_zz_fuselage)*((self.a_dim+(self.fuselage_ratio*self.fuselage_width)-self.z_bar_fuselage))) + (M_y*self.I_yy_fuselage)*(-0.5*self.fuselage_width)) / (self.I_yy_fuselage*self.I_zz_fuselage)
#     self.sigma_2 = (((M_x * self.I_zz_fuselage)*((self.a_dim+(self.fuselage_ratio*self.fuselage_width)-self.z_bar_fuselage))) + (M_y*self.I_yy_fuselage)*(0.5*self.fuselage_width)) / (self.I_yy_fuselage*self.I_zz_fuselage)

#     self.sigma_3 = ((M_x * self.I_zz_fuselage) * -(self.z_bar_fuselage-self.a_dim) + (M_y *self.I_yy_fuselage)*(-0.5*self.fuselage_width)) / (self.I_yy_fuselage*self.I_zz_fuselage)
#     self.sigma_4 = ((M_x * self.I_zz_fuselage) * -(self.z_bar_fuselage-self.a_dim) + (M_y *self.I_yy_fuselage)*(0.5*self.fuselage_width)) / (self.I_yy_fuselage*self.I_zz_fuselage)

#     self.sigma_5 = ((M_x * self.I_zz_fuselage)*(-self.z_bar_fuselage)) / (self.I_yy_fuselage*self.I_zz_fuselage)
#     return self.sigma_1, self.sigma_2, self.sigma_3, self.sigma_4, self.sigma_5

def calculate_boom_areas(self):
    
    # All boom areas are a function of the skin thickness
    w = self.fuselage_width
    r = self.fuselage_ratio
    s = self.s_dim

    B1 = (w / 6) * (2 + self.sigma_2 / self.sigma_1) + (r * w / 6) * (2 + self.sigma_3 / self.sigma_1) # * t_fuselage
    B2 = (w / 6) * (2 + self.sigma_1 / self.sigma_2) + (r * w / 6) * (2 + self.sigma_4 / self.sigma_2) # * t_fuselage
    B3 = (r * w / 6) * (2 + self.sigma_1 / self.sigma_3) + (s * w / 6) * (2 + self.sigma_5 / self.sigma_3) # * t_fuselage
    B4 = (r * w / 6) * (2 + self.sigma_2 / self.sigma_4) + (s * w / 6) * (2 + self.sigma_5 / self.sigma_4) # * t_fuselage
    B5 = (s * w / 6) * (2 + self.sigma_3 / self.sigma_5) + (s * w / 6) * (2 + self.sigma_4 / self.sigma_5) # * t_fuselage

    return B1, B2, B3, B4, B5

    def iterate_booms_per_station(
        self, 
        M_x, 
        M_y, 
        t_fuselage_init=0.001, 
        I_yy_init=0.01, 
        I_zz_init=0.01, 
        tol=1e-5, 
        max_iter=1000, 
        alpha=0.5
    ):
        n_stations = len(self.fuselage_width)

        self.boom_areas_all = np.zeros((n_stations, 5))
        self.I_yy_all = np.zeros(n_stations)
        self.I_zz_all = np.zeros(n_stations)
        self.t_fuselage_final = np.zeros(n_stations)
        iterations_to_converge = np.zeros(n_stations, dtype=int)

        for i in range(n_stations):
            w = self.fuselage_width[i]
            h = self.fuselage_height[i]
            fr = h / w

            # Initial fuselage thickness 
            t = t_fuselage_init if np.isscalar(t_fuselage_init) else t_fuselage_init[i]

            # Initial moments of inertia
            I_yy_old = I_yy_init if np.isscalar(I_yy_init) else I_yy_init[i]
            I_zz_old = I_zz_init if np.isscalar(I_zz_init) else I_zz_init[i]

            
            a_dim = 0.5 / np.tan(np.radians(65))
            s_dim = 0.5 / np.sin(np.radians(65))
            o_dim = s_dim / 2 * np.sin(np.radians(25))

            z_bar = (2 * (fr * ((a_dim + 0.4) * w)) + 2 * (s_dim * (o_dim * w)) + ((a_dim + fr) * w)) / (2 * s_dim + 2 * fr + 1)

            self.z_coords = np.array([
                (z_bar - a_dim),
                (z_bar - a_dim),
                (a_dim + fr * w - z_bar),
                (a_dim + fr * w - z_bar),
                -z_bar
            ])
            self.y_coords = np.array([
                0.5 * w,
                -0.5 * w,
                0.5 * w,
                -0.5 * w,
                0.0
            ])

            # Initial boom areas
            B_old = np.ones(5) * 0.01

            for iteration in range(max_iter):
                # Stress calculation
                sigma = np.zeros(5)
                for j in range(5):
                    sigma[j] = (M_x * I_zz_old * self.z_coords[j] + M_y * I_yy_old * self.y_coords[j]) / (I_yy_old * I_zz_old)

                # New boom areas
                B1 = (w / 6) * (2 + sigma[1] / sigma[0]) + (fr * w / 6) * (2 + sigma[2] / sigma[0])
                B2 = (w / 6) * (2 + sigma[0] / sigma[1]) + (fr * w / 6) * (2 + sigma[3] / sigma[1])
                B3 = (fr * w / 6) * (2 + sigma[0] / sigma[2]) + (s_dim * w / 6) * (2 + sigma[4] / sigma[2])
                B4 = (fr * w / 6) * (2 + sigma[1] / sigma[3]) + (s_dim * w / 6) * (2 + sigma[4] / sigma[3])
                B5 = (s_dim * w / 6) * (2 + sigma[2] / sigma[4]) + (s_dim * w / 6) * (2 + sigma[3] / sigma[4])
                B_new = np.array([B1, B2, B3, B4, B5]) * t

                # Under-relaxation: boom areas
                B_i = alpha * B_new + (1 - alpha) * B_old

                # New moments of inertia based on updated boom areas
                I_yy_new = np.sum((self.z_coords ** 2) * B_i)
                I_zz_new = np.sum((self.y_coords ** 2) * B_i)

                # Under-relaxation: moments of inertia
                I_yy_relaxed = alpha * I_yy_new + (1 - alpha) * I_yy_old
                I_zz_relaxed = alpha * I_zz_new + (1 - alpha) * I_zz_old

                # Thickness update
                sigma_max = np.max(np.abs(sigma))
                t_new = t * (sigma_max / self.sigma_y)
                t = alpha * t_new + (1 - alpha) * t

                # Check for convergence
                if (
                    np.all(np.abs(B_i - B_old) < tol) and
                    abs(I_yy_relaxed - I_yy_old) < tol and
                    abs(I_zz_relaxed - I_zz_old) < tol and
                    abs(t_new - t) < tol
                ):
                    iterations_to_converge[i] = iteration + 1
                    print(f"Station {i}: Converged in {iteration + 1} iteration(s)")
                    break

                # Update for next iteration
                B_old = B_i.copy()
                I_yy_old = I_yy_relaxed
                I_zz_old = I_zz_relaxed

            else:
                iterations_to_converge[i] = max_iter
                print(f"Warning: Station {i} did not converge after {max_iter} iterations.")

            # Save final results
            self.boom_areas_all[i, :] = B_i
            self.I_yy_all[i] = I_yy_relaxed
            self.I_zz_all[i] = I_zz_relaxed
            self.t_fuselage_final[i] = t

            # self.boom_areas_all[i, :] *= t 
            # self.I_yy_all[i] *= t 
            # self.I_zz_all[i] *= t
        print(self.t_fuselage_final*1000)
        return self.boom_areas_all