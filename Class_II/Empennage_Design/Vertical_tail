import os
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from utils import Data

class vertical_tail_sizing:
    def __init__(self, aircraft_data: Data):
        self.aircraft_data = aircraft_data
        self.design_id = aircraft_data.data['design_id']
        self.design_file = f"design{self.design_id}.json"
        self.tail_type = aircraft_data.data['inputs']['tail_type']
        self.A = aircraft_data.data['inputs']['aspect_ratio']
        self.S = aircraft_data.data['outputs']['wing_design']['S']
        self.b = aircraft_data.data['outputs']['wing_design']['b']
        self.c_root = aircraft_data.data['outputs']['wing_design']['chord_root']
        self.c_tip = aircraft_data.data['outputs']['wing_design']['chord_tip']
        self.most_aft_cg = aircraft_data.data['outputs']['cg_range']['most_aft_cg']
        self.most_fwd_cg = aircraft_data.data['outputs']['cg_range']['most_forward_cg']
        self.lv = aircraft_data.data['outputs']['empennage_design']['vertical_tail']['l_v']

        self.lemac = aircraft_data.data['outputs']['wing_design']['X_LEMAC']
        self.MAC = self.aircraft_data.data['outputs']['wing_design']['MAC']
        self.MTOW = self.aircraft_data.data['outputs']['max']['MTOW']
        self.V_cruise = self.aircraft_data.data['requirements']['cruise_speed']

        self.Cn_beta = 0.016940719873178536
        self.Cn_beta_A_h = -0.001983579626566832
        self.Cy_beta_v = -0.02735301051550483
        self.lv = self.lv
        self.S = self.S
        self.b = self.b
        self.sidewash = 0
        self.Vv_V = 1
        self.nv = self.Vv_V**2
        self.Ye = max(aircraft_data.data['outputs']['engine_positions']['y_engines'])

        self.P_engine = aircraft_data.data['inputs']['engine']['engine_power']
        self.V_stall = aircraft_data.data['requirements']['stall_speed_landing']
     

    #method of Torenbek, static directional stability
    def get_vertical_tail_size_static_stab(self):
        Cn_beta = self.Cn_beta
        Cn_beta_A_h = self.Cn_beta_A_h
        Cy_beta_v = self.Cy_beta_v
        lv = self.lv
        S = self.S
        b = self.b
        Vv_V = 0.9
        nv = self.nv
        sidewash = 1.15566/nv-1 #d sigma/d beta
        Sv = (Cn_beta-Cn_beta_A_h)*(S*b)/(Cy_beta_v*(1-sidewash)*Vv_V**2*lv) #Sv >
        return Sv

    def getCL(self):
        W_cruise = self.MTOW
        V_cruise = self.V_cruise
        rho = 1.225
        S = self.S

        CL = W_cruise/(0.5*rho*V_cruise**2*S)
        return CL

    #one engine inoperative case
    def get_vertical_tail_size_one_engine_inoperative(self):
        nv = self.nv
        Cl_alpha_v = 0.124  # deg
        Cl_alpha_v_rad = np.deg2rad(Cl_alpha_v)
        Cy_v_alpha = Cl_alpha_v_rad
        S = self.S
        CL = self.getCL()
        Ye = self.Ye
        lv = 8
        deltaTe = self.P_engine / self.V_stall
        W = self.MTOW
        beta = 0
        Cn_beta_A_h = self.Cn_beta_A_h
        b = self.b
        tau_v = 0
        del_r = 0
        sigma_v = 0

        Sv = S * (CL * (Ye / lv) * (deltaTe / W) + beta * Cn_beta_A_h * (b / lv)) / (
            (tau_v * del_r - (beta - sigma_v)) * nv * Cy_v_alpha
        )
        X_axis = deltaTe * Ye * CL / (W * lv)

        # Clustered print statements
        print("nv:", nv)
        print("Cl_alpha_v (deg):", Cl_alpha_v)
        print("Cl_alpha_v_rad (rad):", Cl_alpha_v_rad)
        print("Cy_v_alpha:", Cy_v_alpha)
        print("S (wing area):", S)
        print("CL (lift coefficient):", CL)
        print("Ye (engine lateral offset):", Ye)
        print("lv (moment arm of tail):", lv)
        print("deltaTe (engine thrust per stall speed):", deltaTe)
        print("W (max takeoff weight):", W)
        print("beta (sideslip angle):", beta)
        print("Cn_beta_A_h (weathercock stability):", Cn_beta_A_h)
        print("b (wing span):", b)
        print("tau_v (rudder effectiveness):", tau_v)
        print("del_r (rudder deflection):", del_r)
        print("sigma_v (sidewash angle):", sigma_v)
        print("Sv (vertical tail area):", Sv)
        print("X_axis (non-dimensional factor):", X_axis)

        return X_axis


    
if __name__ == "__main__":
    file_path = "design3.json"
    aircraft_data = Data(file_path)
    vert_tail = vertical_tail_sizing(aircraft_data=aircraft_data)
    tail_size = vert_tail.get_vertical_tail_size_static_stab()
    X_axis_thing = vert_tail.get_vertical_tail_size_one_engine_inoperative()
    print('vertical_tail_area:',tail_size)
    print('thingy', X_axis_thing)

