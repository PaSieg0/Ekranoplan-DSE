% Define matrices A, B, C, D
A = [8.56146015e-03, -2.10399095e-02,  8.42803062e-02, 0;
     1.61337624e-02,  9.36061499e-01,  0, -1.45380375e+01;
     0, 0, 0, -1.45380375e+01;
    -5.94627222e-04,  5.77467784e+01,  0, -7.83447148e+02];

B = [2.25872674e-04;
     1.39230795e-04;
     0;
     7.53349544e-01];

C = [1, 0, 0, 0;
     0, 1, 0, 0;
     0, 0, 1, 0;
     0, 0, 0, 14.5380375];

D = [0;
     0;
     0;
     0];

% Define Q and R matrices
Q = eye(4) * 10; % Example Q matrix
R = 1; % Scalar for a single input

% Compute LQR controller
[K, S, P] = lqr(A, B, Q, R);

disp('get those gainz:')
disp(K);
% Compute the state-space representation
sys = ss(A, B, C, D);
sys_cl = feedback(sys,K);

%initial states: Cruise speed, cruise AOA, cruise pitch angle, cruise pitch
%rate

x0 = [116.4, 0.06, 0.05, 0];
%sys_cl = ss(A-K*B,B,C,D);

t = 0:0.1:100;
[y,tOut,x0] = initial(sys,x0,t);
% Plot the response of the closed-loop system
figure;
plot(tOut, y);
xlabel('Time (s)');
ylabel('System Response');
title('Closed-Loop System Response');
grid on;

%{
poles = pole(sys_cl);
disp('Poles of the closed-loop system:');
disp(poles);
step(sys_cl);}%


